# Deployment clamd config for clamav
# WARNING: this file has been automatically setup by Puppet
# Please make changes there and rerun setup, not here, as they will be overwritten....

##
## Example config file for the Clam AV daemon
## Please read the clamd.conf(5) manual before editing this file.
##


# Comment or remove the line below.
#Example

# Uncomment this option to enable logging.
# LogFile must be writable for the user running daemon.
# A full path is required.
# Default: disabled
LogFile <%= @clamd_options.delete('LogFile') || '/var/log/clamav/clamd.log' %>

# By default the log file is locked for writing - the lock protects against
# running clamd multiple times (if want to run another clamd, please
# copy the configuration file, change the LogFile variable, and run
# the daemon with --config-file option).
# This option disables log file locking.
# Default: no
#LogFileUnlock yes
<%= %Q(LogFileUnlock #{@clamd_options.delete('LogFileUnlock')}\n) if @clamd_options.key?('LogFileUnlock') -%>

# Maximum size of the log file.
# Value of 0 disables the limit.
# You may use 'M' or 'm' for megabytes (1M = 1m = 1048576 bytes)
# and 'K' or 'k' for kilobytes (1K = 1k = 1024 bytes). To specify the size
# in bytes just don't use modifiers. If LogFileMaxSize is enabled, log
# rotation (the LogRotate option) will always be enabled.
# Default: 1M
LogFileMaxSize <%= @clamd_options.delete('LogFileMaxSize') || '0' %>

# Log time with each message.
# Default: no
LogTime <%= @clamd_options.delete('LogTime') || 'yes' %>

# Also log clean files. Useful in debugging but drastically increases the
# log size.
# Default: no
#LogClean yes
<%= %Q(LogClean #{@clamd_options.delete('LogClean')}\n) if @clamd_options.key?('LogClean') -%>

# Use system logger (can work together with LogFile).
# Default: no
LogSyslog <%= @clamd_options.delete('LogSyslog') || 'yes' %>

# Specify the type of syslog messages - please refer to 'man syslog'
# for facility names.
# Default: LOG_LOCAL6
#LogFacility LOG_MAIL
<%= %Q(LogFacility #{@clamd_options.delete('LogFacility')}\n) if @clamd_options.key?('LogFacility') -%>

# Enable verbose logging.
# Default: no
#LogVerbose yes
<%= %Q(LogVerbose #{@clamd_options.delete('LogVerbose')}\n) if @clamd_options.key?('LogVerbose') -%>

# Enable log rotation. Always enabled when LogFileMaxSize is enabled.
# Default: no
#LogRotate yes
<%= %Q(LogRotate #{@clamd_options.delete('LogRotate')}\n) if @clamd_options.key?('LogRotate') -%>

# Log additional information about the infected file, such as its
# size and hash, together with the virus name.
#ExtendedDetectionInfo yes
<%= %Q(ExtendedDetectionInfo #{@clamd_options.delete('ExtendedDetectionInfo')}\n) if @clamd_options.key?('ExtendedDetectionInfo') -%>

# This option allows you to save a process identifier of the listening
# daemon (main thread).
# Default: disabled
PidFile <%= @clamd_options.delete('PidFile') || '/var/run/clamav/clamd.pid' %>

# Optional path to the global temporary directory.
# Default: system specific (usually /tmp or /var/tmp).
TemporaryDirectory <%= @clamd_options.delete('TemporaryDirectory') || '/var/tmp' %>

# Path to the database directory.
# Default: hardcoded (depends on installation options)
DatabaseDirectory <%= @clamd_options.delete('DatabaseDirectory') || '/var/lib/clamav' %>

# Only load the official signatures published by the ClamAV project.
# Default: no
#OfficialDatabaseOnly no
<%= %Q(OfficialDatabaseOnly #{@clamd_options.delete('OfficialDatabaseOnly')}\n) if @clamd_options.key?('OfficialDatabaseOnly') -%>

# The daemon can work in local mode, network mode or both.
# Due to security reasons we recommend the local mode.

# Path to a local socket file the daemon will listen on.
# Default: disabled (must be specified by a user)
LocalSocket <%= @clamd_options.delete('LocalSocket') || '/var/run/clamav/clamd.sock' %>

# Sets the group ownership on the unix socket.
# Default: disabled (the primary group of the user running clamd)
#LocalSocketGroup virusgroup
<%= %Q(LocalSocketGroup #{@clamd_options.delete('LocalSocketGroup')}\n) if @clamd_options.key?('LocalSocketGroup') -%>

# Sets the permissions on the unix socket to the specified mode.
# Default: disabled (socket is world accessible)
#LocalSocketMode 660
<%= %Q(LocalSocketMode #{@clamd_options.delete('LocalSocketMode')}\n) if @clamd_options.key?('LocalSocketMode') -%>

# Remove stale socket after unclean shutdown.
# Default: yes
FixStaleSocket <%= @clamd_options.delete('FixStaleSocket') || 'yes' %>

# TCP port address.
# Default: no
#TCPSocket 3310
<%= %Q(TCPSocket #{@clamd_options.delete('TCPSocket')}\n) if @clamd_options.key?('TCPSocket') -%>

# TCP address.
# By default we bind to INADDR_ANY, probably not wise.
# Enable the following to provide some degree of protection
# from the outside world. This option can be specified multiple
# times if you want to listen on multiple IPs. IPv6 is now supported.
# Default: no
#TCPAddr 127.0.0.1

# Maximum length the queue of pending connections may grow to.
# Default: 200
MaxConnectionQueueLength <%= @clamd_options.delete('MaxConnectionQueueLength') || '30' %>

# Clamd uses FTP-like protocol to receive data from remote clients.
# If you are using clamav-milter to balance load between remote clamd daemons
# on firewall servers you may need to tune the options below.

# Close the connection when the data size limit is exceeded.
# The value should match your MTA's limit for a maximum attachment size.
# Default: 25M
#StreamMaxLength 10M
<%= %Q(StreamMaxLength #{@clamd_options.delete('StreamMaxLength')}\n) if @clamd_options.key?('StreamMaxLength') -%>

# Limit port range.
# Default: 1024
#StreamMinPort 30000
# Default: 2048
#StreamMaxPort 32000
<%= %Q(StreamMinPort #{@clamd_options.delete('StreamMinPort')}\n) if @clamd_options.key?('StreamMinPort') -%>
<%= %Q(StreamMaxPort #{@clamd_options.delete('StreamMaxPort')}\n) if @clamd_options.key?('StreamMaxPort') -%>

# Maximum number of threads running at the same time.
# Default: 10
MaxThreads <%= @clamd_options.delete('MaxThreads') || '50' %>

# Waiting for data from a client socket will timeout after this time (seconds).
# Default: 120
ReadTimeout <%= @clamd_options.delete('ReadTimeout') || '300' %>

# This option specifies the time (in seconds) after which clamd should
# timeout if a client doesn't provide any initial command after connecting.
# Default: 5
#CommandReadTimeout 5
<%= %Q(CommandReadTimeout #{@clamd_options.delete('CommandReadTimeout')}\n) if @clamd_options.key?('CommandReadTimeout') -%>

# This option specifies how long to wait (in miliseconds) if the send buffer is full.
# Keep this value low to prevent clamd hanging
#
# Default: 500
#SendBufTimeout 200
<%= %Q(SendBufTimeout #{@clamd_options.delete('SendBufTimeout')}\n) if @clamd_options.key?('SendBufTimeout') -%>

# Maximum number of queued items (including those being processed by MaxThreads threads)
# It is recommended to have this value at least twice MaxThreads if possible.
# WARNING: you shouldn't increase this too much to avoid running out  of file descriptors,
# the following condition should hold:
# MaxThreads*MaxRecursion + (MaxQueue - MaxThreads) + 6< RLIMIT_NOFILE (usual max is 1024)
#
# Default: 100
#MaxQueue 200
<%= %Q(MaxQueue #{@clamd_options.delete('MaxQueue')}\n) if @clamd_options.key?('MaxQueue') -%>

# Waiting for a new job will timeout after this time (seconds).
# Default: 30
#IdleTimeout 60
<%= %Q(IdleTimeout #{@clamd_options.delete('IdleTimeout')}\n) if @clamd_options.key?('IdleTimeout') -%>

# Don't scan files and directories matching regex
# This directive can be used multiple times
# Default: scan all
#ExcludePath ^/proc/
#ExcludePath ^/sys/

# Maximum depth directories are scanned at.
# Default: 15
#MaxDirectoryRecursion 20
<%= %Q(MaxDirectoryRecursion #{@clamd_options.delete('MaxDirectoryRecursion')}\n) if @clamd_options.key?('MaxDirectoryRecursion') -%>

# Follow directory symlinks.
# Default: no
#FollowDirectorySymlinks yes
<%= %Q(FollowDirectorySymlinks #{@clamd_options.delete('FollowDirectorySymlinks')}\n) if @clamd_options.key?('FollowDirectorySymlinks') -%>

# Follow regular file symlinks.
# Default: no
#FollowFileSymlinks yes
<%= %Q(FollowFileSymlinks #{@clamd_options.delete('FollowFileSymlinks')}\n) if @clamd_options.key?('FollowFileSymlinks') -%>

# Scan files and directories on other filesystems.
# Default: yes
#CrossFilesystems yes
<%= %Q(CrossFilesystems #{@clamd_options.delete('CrossFilesystems')}\n) if @clamd_options.key?('CrossFilesystems') -%>

# Perform a database check.
# Default: 600 (10 min)
#SelfCheck 600
<%= %Q(SelfCheck #{@clamd_options.delete('SelfCheck')}\n) if @clamd_options.key?('SelfCheck') -%>

# Execute a command when virus is found. In the command string %v will
# be replaced with the virus name.
# Default: no
#VirusEvent /usr/local/bin/send_sms 123456789 "VIRUS ALERT: %v"
<%= %Q(VirusEvent #{@clamd_options.delete('VirusEvent')}\n) if @clamd_options.key?('VirusEvent') -%>

# Run as another user (clamd must be started by root for this option to work)
# Default: don't drop privileges
User <%= @clamd_options.delete('User') || 'clam' %>

# Initialize supplementary group access (clamd must be started by root).
# Default: no
AllowSupplementaryGroups <%= @clamd_options.delete('AllowSupplementaryGroups') || 'yes' %>

# Stop daemon when libclamav reports out of memory condition.
#ExitOnOOM yes
<%= %Q(ExitOnOOM #{@clamd_options.delete('ExitOnOOM')}\n) if @clamd_options.key?('ExitOnOOM') -%>

# Don't fork into background.
# Default: no
#Foreground yes
<%= %Q(Foreground #{@clamd_options.delete('Foreground')}\n) if @clamd_options.key?('Foreground') -%>

# Enable debug messages in libclamav.
# Default: no
#Debug yes
<%= %Q(Debug #{@clamd_options.delete('Debug')}\n) if @clamd_options.key?('Debug') -%>

# Do not remove temporary files (for debug purposes).
# Default: no
#LeaveTemporaryFiles yes
<%= %Q(LeaveTemporaryFiles #{@clamd_options.delete('LeaveTemporaryFiles')}\n) if @clamd_options.key?('LeaveTemporaryFiles') -%>

# Permit use of the ALLMATCHSCAN command. If set to no, clamd will reject
# any ALLMATCHSCAN command as invalid.
# Default: yes
#AllowAllMatchScan no
<%= %Q(AllowAllMatchScan #{@clamd_options.delete('AllowAllMatchScan')}\n) if @clamd_options.key?('AllowAllMatchScan') -%>

# Detect Possibly Unwanted Applications.
# Default: no
#DetectPUA yes
<%= %Q(DetectPUA #{@clamd_options.delete('DetectPUA')}\n) if @clamd_options.key?('DetectPUA') -%>

# Exclude a specific PUA category. This directive can be used multiple times.
# See https://github.com/vrtadmin/clamav-faq/blob/master/faq/faq-pua.md for
# the complete list of PUA categories.
# Default: Load all categories (if DetectPUA is activated)
#ExcludePUA NetTool
#ExcludePUA PWTool

# Only include a specific PUA category. This directive can be used multiple
# times.
# Default: Load all categories (if DetectPUA is activated)
#IncludePUA Spy
#IncludePUA Scanner
#IncludePUA RAT

# In some cases (eg. complex malware, exploits in graphic files, and others),
# ClamAV uses special algorithms to provide accurate detection. This option
# controls the algorithmic detection.
# Default: yes
#AlgorithmicDetection yes
<%= %Q(AlgorithmicDetection #{@clamd_options.delete('AlgorithmicDetection')}\n) if @clamd_options.key?('AlgorithmicDetection') -%>

# This option causes memory or nested map scans to dump the content to disk.
# If you turn on this option, more data is written to disk and is available
# when the LeaveTemporaryFiles option is enabled.
#ForceToDisk yes
<%= %Q(ForceToDisk #{@clamd_options.delete('ForceToDisk')}\n) if @clamd_options.key?('ForceToDisk') -%>

# This option allows you to disable the caching feature of the engine. By
# default, the engine will store an MD5 in a cache of any files that are
# not flagged as virus or that hit limits checks. Disabling the cache will
# have a negative performance impact on large scans.
# Default: no
#DisableCache yes
<%= %Q(DisableCache #{@clamd_options.delete('DisableCache')}\n) if @clamd_options.key?('DisableCache') -%>

##
## Executable files
##

# PE stands for Portable Executable - it's an executable file format used
# in all 32 and 64-bit versions of Windows operating systems. This option allows
# ClamAV to perform a deeper analysis of executable files and it's also
# required for decompression of popular executable packers such as UPX, FSG,
# and Petite. If you turn off this option, the original files will still be
# scanned, but without additional processing.
# Default: yes
ScanPE <%= @clamd_options.delete('ScanPE') || 'yes' %>

# Certain PE files contain an authenticode signature. By default, we check
# the signature chain in the PE file against a database of trusted and
# revoked certificates if the file being scanned is marked as a virus.
# If any certificate in the chain validates against any trusted root, but
# does not match any revoked certificate, the file is marked as whitelisted.
# If the file does match a revoked certificate, the file is marked as virus.
# The following setting completely turns off authenticode verification.
# Default: no
#DisableCertCheck yes
<%= %Q(DisableCertCheck #{@clamd_options.delete('DisableCertCheck')}\n) if @clamd_options.key?('DisableCertCheck') -%>

# Executable and Linking Format is a standard format for UN*X executables.
# This option allows you to control the scanning of ELF files.
# If you turn off this option, the original files will still be scanned, but
# without additional processing.
# Default: yes
ScanELF <%= @clamd_options.delete('ScanELF') || 'yes' %>

# With this option clamav will try to detect broken executables (both PE and
# ELF) and mark them as Broken.Executable.
# Default: no
DetectBrokenExecutables <%= @clamd_options.delete('DetectBrokenExecutables') || 'yes' %>


##
## Documents
##

# This option enables scanning of OLE2 files, such as Microsoft Office
# documents and .msi files.
# If you turn off this option, the original files will still be scanned, but
# without additional processing.
# Default: yes
ScanOLE2 <%= @clamd_options.delete('ScanOLE2') || 'yes' %>

# With this option enabled OLE2 files with VBA macros, which were not
# detected by signatures will be marked as "Heuristics.OLE2.ContainsMacros".
# Default: no
#OLE2BlockMacros no
<%= %Q(OLE2BlockMacros #{@clamd_options.delete('OLE2BlockMacros')}\n) if @clamd_options.key?('OLE2BlockMacros') -%>

# This option enables scanning within PDF files.
# If you turn off this option, the original files will still be scanned, but
# without decoding and additional processing.
# Default: yes
#ScanPDF yes
<%= %Q(ScanPDF #{@clamd_options.delete('ScanPDF')}\n) if @clamd_options.key?('ScanPDF') -%>

# This option enables scanning within SWF files.
# If you turn off this option, the original files will still be scanned, but
# without decoding and additional processing.
# Default: yes
#ScanSWF yes
<%= %Q(ScanSWF #{@clamd_options.delete('ScanSWF')}\n) if @clamd_options.key?('ScanSWF') -%>


##
## Mail files
##

# Enable internal e-mail scanner.
# If you turn off this option, the original files will still be scanned, but
# without parsing individual messages/attachments.
# Default: yes
ScanMail <%= @clamd_options.delete('ScanMail') || 'yes' %>

# Scan RFC1341 messages split over many emails.
# You will need to periodically clean up $TemporaryDirectory/clamav-partial directory.
# WARNING: This option may open your system to a DoS attack.
#	   Never use it on loaded servers.
# Default: no
#ScanPartialMessages yes
<%= %Q(ScanPartialMessages #{@clamd_options.delete('ScanPartialMessages')}\n) if @clamd_options.key?('ScanPartialMessages') -%>

# With this option enabled ClamAV will try to detect phishing attempts by using
# signatures.
# Default: yes
#PhishingSignatures yes
<%= %Q(PhishingSignatures #{@clamd_options.delete('PhishingSignatures')}\n) if @clamd_options.key?('PhishingSignatures') -%>

# Scan URLs found in mails for phishing attempts using heuristics.
# Default: yes
#PhishingScanURLs yes
<%= %Q(PhishingScanURLs #{@clamd_options.delete('PhishingScanURLs')}\n) if @clamd_options.key?('PhishingScanURLs') -%>

# Always block SSL mismatches in URLs, even if the URL isn't in the database.
# This can lead to false positives.
#
# Default: no
#PhishingAlwaysBlockSSLMismatch no
<%= %Q(PhishingAlwaysBlockSSLMismatch #{@clamd_options.delete('PhishingAlwaysBlockSSLMismatch')}\n) if @clamd_options.key?('PhishingAlwaysBlockSSLMismatch') -%>

# Always block cloaked URLs, even if URL isn't in database.
# This can lead to false positives.
#
# Default: no
#PhishingAlwaysBlockCloak no
<%= %Q(PhishingAlwaysBlockCloak #{@clamd_options.delete('PhishingAlwaysBlockCloak')}\n) if @clamd_options.key?('PhishingAlwaysBlockCloak') -%>

# Detect partition intersections in raw disk images using heuristics.
# Default: no
#PartitionIntersection no
<%= %Q(PartitionIntersection #{@clamd_options.delete('PartitionIntersection')}\n) if @clamd_options.key?('PartitionIntersection') -%>

# Allow heuristic match to take precedence.
# When enabled, if a heuristic scan (such as phishingScan) detects
# a possible virus/phish it will stop scan immediately. Recommended, saves CPU
# scan-time.
# When disabled, virus/phish detected by heuristic scans will be reported only at
# the end of a scan. If an archive contains both a heuristically detected
# virus/phish, and a real malware, the real malware will be reported
#
# Keep this disabled if you intend to handle "*.Heuristics.*" viruses
# differently from "real" malware.
# If a non-heuristically-detected virus (signature-based) is found first,
# the scan is interrupted immediately, regardless of this config option.
#
# Default: no
#HeuristicScanPrecedence yes
<%= %Q(HeuristicScanPrecedence #{@clamd_options.delete('HeuristicScanPrecedence')}\n) if @clamd_options.key?('HeuristicScanPrecedence') -%>


##
## Data Loss Prevention (DLP)
##

# Enable the DLP module
# Default: No
#StructuredDataDetection yes
<%= %Q(StructuredDataDetection #{@clamd_options.delete('StructuredDataDetection')}\n) if @clamd_options.key?('StructuredDataDetection') -%>

# This option sets the lowest number of Credit Card numbers found in a file
# to generate a detect.
# Default: 3
#StructuredMinCreditCardCount 5
<%= %Q(StructuredMinCreditCardCount #{@clamd_options.delete('StructuredMinCreditCardCount')}\n) if @clamd_options.key?('StructuredMinCreditCardCount') -%>

# This option sets the lowest number of Social Security Numbers found
# in a file to generate a detect.
# Default: 3
#StructuredMinSSNCount 5
<%= %Q(StructuredMinSSNCount #{@clamd_options.delete('StructuredMinSSNCount')}\n) if @clamd_options.key?('StructuredMinSSNCount') -%>

# With this option enabled the DLP module will search for valid
# SSNs formatted as xxx-yy-zzzz
# Default: yes
#StructuredSSNFormatNormal yes
<%= %Q(StructuredSSNFormatNormal #{@clamd_options.delete('StructuredSSNFormatNormal')}\n) if @clamd_options.key?('StructuredSSNFormatNormal') -%>

# With this option enabled the DLP module will search for valid
# SSNs formatted as xxxyyzzzz
# Default: no
#StructuredSSNFormatStripped yes
<%= %Q(StructuredSSNFormatStripped #{@clamd_options.delete('StructuredSSNFormatStripped')}\n) if @clamd_options.key?('StructuredSSNFormatStripped') -%>


##
## HTML
##

# Perform HTML normalisation and decryption of MS Script Encoder code.
# Default: yes
# If you turn off this option, the original files will still be scanned, but
# without additional processing.
#ScanHTML yes
<%= %Q(ScanHTML #{@clamd_options.delete('ScanHTML')}\n) if @clamd_options.key?('ScanHTML') -%>


##
## Archives
##

# ClamAV can scan within archives and compressed files.
# If you turn off this option, the original files will still be scanned, but
# without unpacking and additional processing.
# Default: yes
ScanArchive <%= @clamd_options.delete('ScanArchive') || 'yes' %>

# Mark encrypted archives as viruses (Encrypted.Zip, Encrypted.RAR).
# Default: no
ArchiveBlockEncrypted <%= @clamd_options.delete('ArchiveBlockEncrypted') || 'no' %>


##
## Limits
##

# The options below protect your system against Denial of Service attacks
# using archive bombs.

# This option sets the maximum amount of data to be scanned for each input file.
# Archives and other containers are recursively extracted and scanned up to this
# value.
# Value of 0 disables the limit
# Note: disabling this limit or setting it too high may result in severe damage
# to the system.
# Default: 100M
#MaxScanSize 150M
<%= %Q(MaxScanSize #{@clamd_options.delete('MaxScanSize')}\n) if @clamd_options.key?('MaxScanSize') -%>

# Files larger than this limit won't be scanned. Affects the input file itself
# as well as files contained inside it (when the input file is an archive, a
# document or some other kind of container).
# Value of 0 disables the limit.
# Note: disabling this limit or setting it too high may result in severe damage
# to the system.
# Default: 25M
#MaxFileSize 30M
<%= %Q(MaxFileSize #{@clamd_options.delete('MaxFileSize')}\n) if @clamd_options.key?('MaxFileSize') -%>

# Nested archives are scanned recursively, e.g. if a Zip archive contains a RAR
# file, all files within it will also be scanned. This options specifies how
# deeply the process should be continued.
# Note: setting this limit too high may result in severe damage to the system.
# Default: 16
#MaxRecursion 10
<%= %Q(MaxRecursion #{@clamd_options.delete('MaxRecursion')}\n) if @clamd_options.key?('MaxRecursion') -%>

# Number of files to be scanned within an archive, a document, or any other
# container file.
# Value of 0 disables the limit.
# Note: disabling this limit or setting it too high may result in severe damage
# to the system.
# Default: 10000
#MaxFiles 15000
<%= %Q(MaxFiles #{@clamd_options.delete('MaxFiles')}\n) if @clamd_options.key?('MaxFiles') -%>

# Maximum size of a file to check for embedded PE. Files larger than this value
# will skip the additional analysis step.
# Note: disabling this limit or setting it too high may result in severe damage
# to the system.
# Default: 10M
#MaxEmbeddedPE 10M
<%= %Q(MaxEmbeddedPE #{@clamd_options.delete('MaxEmbeddedPE')}\n) if @clamd_options.key?('MaxEmbeddedPE') -%>

# Maximum size of a HTML file to normalize. HTML files larger than this value
# will not be normalized or scanned.
# Note: disabling this limit or setting it too high may result in severe damage
# to the system.
# Default: 10M
#MaxHTMLNormalize 10M
<%= %Q(MaxHTMLNormalize #{@clamd_options.delete('MaxHTMLNormalize')}\n) if @clamd_options.key?('MaxHTMLNormalize') -%>

# Maximum size of a normalized HTML file to scan. HTML files larger than this
# value after normalization will not be scanned.
# Note: disabling this limit or setting it too high may result in severe damage
# to the system.
# Default: 2M
#MaxHTMLNoTags 2M
<%= %Q(MaxHTMLNoTags #{@clamd_options.delete('MaxHTMLNoTags')}\n) if @clamd_options.key?('MaxHTMLNoTags') -%>

# Maximum size of a script file to normalize. Script content larger than this
# value will not be normalized or scanned.
# Note: disabling this limit or setting it too high may result in severe damage
# to the system.
# Default: 5M
#MaxScriptNormalize 5M
<%= %Q(MaxScriptNormalize #{@clamd_options.delete('MaxScriptNormalize')}\n) if @clamd_options.key?('MaxScriptNormalize') -%>

# Maximum size of a ZIP file to reanalyze type recognition. ZIP files larger
# than this value will skip the step to potentially reanalyze as PE.
# Note: disabling this limit or setting it too high may result in severe damage
# to the system.
# Default: 1M
#MaxZipTypeRcg 1M
<%= %Q(MaxZipTypeRcg #{@clamd_options.delete('MaxZipTypeRcg')}\n) if @clamd_options.key?('MaxZipTypeRcg') -%>

# This option sets the maximum number of partitions of a raw disk image to be scanned.
# Raw disk images with more partitions than this value will have up to the value number
# partitions scanned. Negative values are not allowed.
# Note: setting this limit too high may result in severe damage or impact performance.
# Default: 50
#MaxPartitions 128
<%= %Q(MaxPartitions #{@clamd_options.delete('MaxPartitions')}\n) if @clamd_options.key?('MaxPartitions') -%>

# This option sets the maximum number of icons within a PE to be scanned.
# PE files with more icons than this value will have up to the value number icons scanned.
# Negative values are not allowed.
# WARNING: setting this limit too high may result in severe damage or impact performance.
# Default: 100
#MaxIconsPE 200
<%= %Q(MaxIconsPE #{@clamd_options.delete('MaxIconsPE')}\n) if @clamd_options.key?('MaxIconsPE') -%>

##
## On-access Scan Settings
##

# Enable on-access scanning. Currently, this is supported via fanotify.
# Clamuko/Dazuko support has been deprecated.
# Default: no
#ScanOnAccess yes
<%= %Q(ScanOnAccess #{@clamd_options.delete('ScanOnAccess')}\n) if @clamd_options.key?('ScanOnAccess') -%>

# Don't scan files larger than OnAccessMaxFileSize
# Value of 0 disables the limit.
# Default: 5M
#OnAccessMaxFileSize 10M
<%= %Q(OnAccessMaxFileSize #{@clamd_options.delete('OnAccessMaxFileSize')}\n) if @clamd_options.key?('OnAccessMaxFileSize') -%>

# Set the include paths (all files inside them will be scanned). You can have
# multiple OnAccessIncludePath directives but each directory must be added
# in a separate line. (On-access scan only)
# Default: disabled
#OnAccessIncludePath /home
#OnAccessIncludePath /students

# Set the exclude paths. All subdirectories are also excluded.
# (On-access scan only)
# Default: disabled
#OnAccessExcludePath /home/bofh

# With this option you can whitelist specific UIDs. Processes with these UIDs
# will be able to access all files.
# This option can be used multiple times (one per line).
# Default: disabled
#OnAccessExcludeUID 0


##
## Bytecode
##

# With this option enabled ClamAV will load bytecode from the database.
# It is highly recommended you keep this option on, otherwise you'll miss detections for many new viruses.
# Default: yes
#Bytecode yes
<%= %Q(Bytecode #{@clamd_options.delete('Bytecode')}\n) if @clamd_options.key?('Bytecode') -%>

# Set bytecode security level.
# Possible values:
#       None - no security at all, meant for debugging. DO NOT USE THIS ON PRODUCTION SYSTEMS
#         This value is only available if clamav was built with --enable-debug!
#       TrustSigned - trust bytecode loaded from signed .c[lv]d files,
#                insert runtime safety checks for bytecode loaded from other sources
#       Paranoid - don't trust any bytecode, insert runtime checks for all
# Recommended: TrustSigned, because bytecode in .cvd files already has these checks
# Note that by default only signed bytecode is loaded, currently you can only
# load unsigned bytecode in --enable-debug mode.
#
# Default: TrustSigned
#BytecodeSecurity TrustSigned
<%= %Q(BytecodeSecurity #{@clamd_options.delete('BytecodeSecurity')}\n) if @clamd_options.key?('BytecodeSecurity') -%>

# Set bytecode timeout in miliseconds.
#
# Default: 5000
# BytecodeTimeout 1000
<%= %Q(BytecodeTimeout #{@clamd_options.delete('BytecodeTimeout')}\n) if @clamd_options.key?('BytecodeTimeout') -%>

##
## Statistics gathering and submitting
##

# Enable statistical reporting.
# Default: no
#StatsEnabled yes
<%= %Q(StatsEnabled #{@clamd_options.delete('StatsEnabled')}\n) if @clamd_options.key?('StatsEnabled') -%>

# Disable submission of individual PE sections for files flagged as malware.
# Default: no
#StatsPEDisabled yes
<%= %Q(StatsPEDisabled #{@clamd_options.delete('StatsPEDisabled')}\n) if @clamd_options.key?('StatsPEDisabled') -%>

# HostID in the form of an UUID to use when submitting statistical information.
# Default: auto
#StatsHostID auto
<%= %Q(StatsHostID #{@clamd_options.delete('StatsHostID')}\n) if @clamd_options.key?('StatsHostID') -%>

# Time in seconds to wait for the stats server to come back with a response
# Default: 10
#StatsTimeout 10
<%= %Q(StatsTimeout #{@clamd_options.delete('StatsTimeout')}\n) if @clamd_options.key?('StatsTimeout') -%>

<% @clamd_options.sort.each do |k,v| -%>
<% Array(v).each do |av| -%>
<%= %Q(#{k} #{av}) %>
<% end -%>
<% end -%>
