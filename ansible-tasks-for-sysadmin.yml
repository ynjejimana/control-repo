---

- name: Few List of Ansible Tasks for Sysadmins
  hosts: all

  vars_prompt:
    - name: "hosts_prompt"
      prompt: "Host or Hostgroup to run this Playbook"
      private: no

    - name: "your_user"
      prompt: "User account to be Created"
      private: no

  tasks:

    - name: Change SELinux mode to permissive   #A handy task to enforce or disable SELinux, this may help in case we have to manage N numbers of clients.
      remote_user: ansible
      become: yes
      become_method: sudo
      selinux:
        policy: targeted
        state: permissive

    - name: Enable Red Hat Optional Repository    #To enable a yum repo below task can be used. The example is shown below for one of Red Hat servers repository.
      remote_user: ansible
      become: yes
      become_method: sudo
      command:
        subscription-manager repos --enable rhel-7-server-optional-rpms

    - name: Install system updates for Red Hat systems            #Updating a Yum based Linux Server
      yum: name=* state=latest update_cache=yes
      remote_user: ansible
      become: yes
      become_method: sudo
      when: ansible_distribution == "Red Hat Enterprise Linux"

    - name: Install Sysadmin Packages                           #To perform multiple package installation we have another way as well using “with_items“.
      remote_user: ansible
      become: yes
      become_method: sudo
      yum: pkg={{ item }} state=installed update_cache=yes
      with_items:
            - vim
            - wget
            - curl
            - bash
            - ethtool
            - binutils
            - nfs-utils
            - pam
            - procps-ng
            - psmisc
            - smartmontools
            - unzip
            - sysstat

    - name: Install downloaded RPM packages using YUM.          #In case if we may be required to install any downloaded packages it can be done using yum as well.
      remote_user: ansible
      become: yes
      become_method: sudo
      yum: state=present name={{ item }}
      with_items:
            - /home/ansible/httpd-2.4.6-88.el7.centos.x86_64.rpm
            - /home/ansible/httpd-tools-2.4.6-88.el7.centos.x86_64.rpm
            - /home/ansible/httpd-manual-2.4.6-88.el7.centos.noarch.rpm

    - name: Removing a package from server                    #Removing an installed package using YUM
      yum: 
        name=ntp state=absent
      remote_user: ansible
      become: yes
      become_method: sudo

    - name: Template from source to Destination with ownership and permission.        #if configuring NTP, Chrony, SSHD etc in our daily routines or while doing a post config during server build, we can a template to save time.
      remote_user: ansible
      become: yes
      become_method: sudo
      template:
        backup: yes
        src: /home/ansible/server_configs/templates/chrony.conf
        dest: /etc/chrony.conf
        owner: root
        group: root
        mode: 0644

    - name: Touch a file under ansible user's home directory.           #In some cases, we required to create a file on a remote server it can be accomplished using “file” module as shown below.
      remote_user: ansible
      become: yes
      become_method: sudo
      file: 
        path: /home/ansible/some_file.txt
        state: touch
        owner: ansbile
        group: ansible
        mode: 0644

    - name: Enable and Start chrony Service persistently            #Much required task whenever we need to start, stop or restart a service across the number of servers in a single go.
      remote_user: ansible
      become: yes
      become_method: sudo
      service: 
        name=chronyd state=start enabled=yes

    - name: Enable SSHD X11 forwarding          #There are several options available for this module and not limited to the only search and replace instead it supports to insert after, insert before, EOF or by matching something.
      remote_user: ansible
      become: yes
      become_method: sudo
      lineinfile:
        dest: /etc/ssh/sshd_config
        backup: yes
        regexp: '^#?X11Forwarding'
        backrefs: yes
        line: X11Forwarding yes
        state: present

    - name: Ensure group "sysadmins" exists         #To create a user account using Ansible. first, the group need to be present, so first create the group and by following create the user.
      remote_user: ansible
      become: yes
      become_method: sudo
      group:
        name: sysadmins
        gid: 5055
        state: present

#Then create the user by adding him into required groups. (Module: User)

    - name: Ensure user "babinlonston" exists
      remote_user: ansible
      become: yes
      become_method: sudo
      user:
        name: babinlonston
        comment: "Managing linuxsysadmins"
        uid: 5055
        group: sysadmins
        groups: backup,healthcheck,ansible
        shell: /bin/bash
        password: "*###########*"
        state: present

    - name: Allow user babinlonston to manage Docker.         #In some cases, if you need to add an existing user to a supplementary group we need to use “append:“.
      remote_user: ansible
      become: yes
      become_method: sudo
      user:
        name: babinlonston
        groups: docker
        append: yes

    - name: Adding Oracle Kernel Parameters         #Insert, Append and make changes to a file or existing configuration file. This can also be followed for adding new lines in a file.
      remote_user: ansible
      become: yes
      become_method: sudo
      lineinfile:
        owner: root
        group: root
        dest: /etc/sysctl.d/99-sysctl.conf
        line: '{{ item }}'
      with_items: 
        - '#### Oracle Install related kernel parameters ###'
        - 'vm.swappiness = 1'
        - 'vm.dirty_background_ratio = 3'
        - 'vm.dirty_ratio = 80'

    - name: Create /date mount point with respective Ownership    #create a dir to mount a fs with required ownership and permission. “{{ mount_owner }}”, “{{ mount_group }}” defined variable at beginning of the playbook.
      remote_user: ansible
      become: yes
      become_method: sudo
      file:
        path: /data
        state: directory
        owner: "{{ mount_owner }}"
        group: "{{ mount_group }}"
        mode: 0755
        recurse: yes

    - name: Register output of a command and print on the screen.       #To print the content of a file on the screen.
      remote_user: ansible
      become: yes
      become_method: sudo
      command:
        cat /etc/issue
      register: content_of_issue

    - debug:
        var: content_of_issue

    - name: Create a Partition for /data file system      #Partitioning a Disk. Create a new single partition using fdisk, The partition type will be LVM.
      remote_user: ansible
      become: yes
      become_method: sudo
      shell:
        /bin/echo -e "n\np\n1\n\n\nt\n8e\nw" | sudo fdisk "{{ disk_name }}"

    - name: Create a file system on newly created Logical volume.               #The variables are defined for the file system type and logical volume.
      remote_user: ansible
      become: yes
      become_method: sudo
      filesystem:
        fstype: "{{ file_system }}"
        dev: "/dev/mapper/{{ vg_name }}-{{ lv_name }}"

    - name: Mount the created filesystem.           #Mounting a File System (Module: mount). Inputs are in place from variables.
      remote_user: ansible
      become: yes
      become_method: sudo
      mount:
        path: "{{ mount_point }}"
        src: "/dev/mapper/{{ vg_name }}-{{ lv_name }}"
        fstype: "{{ file_system }}"
        opts: rw,noatime,noexec,nosuid
        state: mounted


